name: Release build

on:
  push:
    tags:
      - 'v*.*.*' 

jobs:
  create-release:
    runs-on: ubuntu-18.04
    steps:
      - name: Set release env
        run: echo "RELEASE_REPO_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.RELEASE_REPO_TAG }}
          body: |
            This is a automated creation of a release. Wait for changelogs.
          draft: true
          prerelease: false

      - id: step_upload_url
        run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"
    outputs:
      upload_url: ${{ steps.step_upload_url.outputs.upload_url }}

  build-release:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-20.04]
        build-type: [Release]
        include:
          - os: windows-latest
            cmake-args: '-AWin32 -Thost=x86 -DGH_ACBUILD=TRUE  -DUSING_BOOST_NO_CONAN=TRUE -DUSING_OPENSSL_NO_CONAN=TRUE -DBoost_NO_BOOST_CMAKE=ON'
          - os: ubuntu-20.04
            cmake-args: '-DCMAKE_CXX_FLAGS=-m32 -DCMAKE_C_FLAGS=-m32 -DGH_ACBUILD=TRUE'

    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: ${{ matrix.build-type }}
      CMAKE_BUILD_PARALLEL_LEVEL: 2

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set env
      run: echo "REPO_TAG=$(git describe --tags --always)" >> $GITHUB_ENV
      shell: bash
    
    - name: get-cmake
      uses: lukka/get-cmake@v3.19.0

    - name: Set artifact name
      run: echo "ARTIFACT_NAME=discord-connector-${{ env.REPO_TAG }}-${{ runner.os }}" >> $GITHUB_ENV
    
    - if: runner.os == 'Windows'
      name: Install boost
      run: |
          $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.73.0/boost_1_73_0-msvc-14.2-64.exe"
          (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\boost.exe")
          Start-Process -Wait -FilePath "$env:TEMP\boost.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=C:\\hostedtoolcache\\windows\\Boost"

    - if: runner.os == 'Windows'
      name: Set boost env
      run: echo "BOOST_ROOT=C:\\hostedtoolcache\windows\\Boost" >> $GITHUB_ENV
      shell: bash

    - if: runner.os == 'Windows'
      name: Install openssl
      run: choco install openssl --forcex86 | out-null
      
    - if: runner.os == 'Windows'
      name: Setup openssl envvar
      run: echo "OPENSSL_ROOT=C:\\Program Files (x86)\\OpenSSL-Win32" >> $GITHUB_ENV
      
    - if: runner.os == 'Linux'
      name: Install gcc/g++-multilib
      run: |
        sudo apt-get update
        sudo apt install gcc-multilib g++-multilib
      
    - name: Get python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.0 # SemVer's version range syntax

    - name: Install conan
      run: |
        python -m pip install --upgrade pip
        pip install conan
        conan remote add conan-transit-legacy https://api.bintray.com/conan/conan/conan-transit

    - name: Configure cmake & build
      uses: lukka/run-cmake@v2
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        buildDirectory: '${{ runner.workspace }}/build'
        cmakeAppendedArgs: '${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DDCC_VERSION=${{ env.REPO_TAG }} -DBOOST_ROOT=${{ env.BOOST_ROOT }} -DOPENSSL_ROOT=${{ env.OPENSSL_ROOT }}'

    - name: Upload release artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ runner.workspace }}/build/artifact/

    - name: Zip artifact
      run: Compress-Archive ${{ runner.workspace }}/build/artifact/* ${{ runner.workspace }}/build/artifact/${{ env.ARTIFACT_NAME }}.zip
      shell: pwsh

    - name: Upload Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ runner.workspace }}/build/artifact/${{ env.ARTIFACT_NAME }}.zip
        asset_name: ${{ env.ARTIFACT_NAME }}.zip
        asset_content_type: application/zip

  build-debug:
    needs: [create-release, build-release]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-20.04]
        build-type: [Debug]
        include:
          - os: windows-latest
            cmake-args: '-AWin32 -Thost=x86 -DGH_ACBUILD=TRUE  -DUSING_BOOST_NO_CONAN=TRUE -DUSING_OPENSSL_NO_CONAN=TRUE -DBoost_NO_BOOST_CMAKE=ON'
          - os: ubuntu-20.04
            cmake-args: '-DCMAKE_CXX_FLAGS=-m32 -DCMAKE_C_FLAGS=-m32 -DGH_ACBUILD=TRUE'

    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: ${{ matrix.build-type }}
      CMAKE_BUILD_PARALLEL_LEVEL: 2

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set env
      run: echo "REPO_TAG=$(git describe --tags --always)" >> $GITHUB_ENV
      shell: bash
    
    - name: get-cmake
      uses: lukka/get-cmake@v3.19.0

    - name: Set artifact name
      run: echo "ARTIFACT_NAME=discord-connector-${{ env.REPO_TAG }}-${{ runner.os }}-Debug" >> $GITHUB_ENV
    
    - if: runner.os == 'Windows'
      name: Install boost
      run: |
          $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.73.0/boost_1_73_0-msvc-14.2-64.exe"
          (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\boost.exe")
          Start-Process -Wait -FilePath "$env:TEMP\boost.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=C:\\hostedtoolcache\\windows\\Boost"

    - if: runner.os == 'Windows'
      name: Set boost env
      run: echo "BOOST_ROOT=C:\\hostedtoolcache\windows\\Boost" >> $GITHUB_ENV
      shell: bash

    - if: runner.os == 'Windows'
      name: Install openssl
      run: choco install openssl --forcex86 | out-null
      
    - if: runner.os == 'Windows'
      name: Setup openssl envvar
      run: echo "OPENSSL_ROOT=C:\\Program Files (x86)\\OpenSSL-Win32" >> $GITHUB_ENV
      
    - if: runner.os == 'Linux'
      name: Install gcc/g++-multilib
      run: |
        sudo apt-get update
        sudo apt install gcc-multilib g++-multilib
      
    - name: Get python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.0 # SemVer's version range syntax

    - name: Install conan
      run: |
        python -m pip install --upgrade pip
        pip install conan
        conan remote add conan-transit-legacy https://api.bintray.com/conan/conan/conan-transit

    - name: Configure cmake & build
      uses: lukka/run-cmake@v2
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        buildDirectory: '${{ runner.workspace }}/build'
        cmakeAppendedArgs: '${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DDCC_VERSION=${{ env.REPO_TAG }} -DBOOST_ROOT=${{ env.BOOST_ROOT }} -DOPENSSL_ROOT=${{ env.OPENSSL_ROOT }}'

    - name: Upload release artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ runner.workspace }}/build/artifact/

    - name: Upload Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }} 
        asset_path: ./${{ env.ARTIFACT_NAME }}.zip
        asset_name: ${{ env.ARTIFACT_NAME }}.zip
        asset_content_type: application/zip